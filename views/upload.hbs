<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>上傳區</title>
    <script src="https://cdn.rawgit.com/mattdiamond/Recorderjs/08e7abd9/dist/recorder.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <style>
        input {
            margin-right: .5em;
            margin-left: .5em;
        }

        #transcript {
            width: 25rem;
        }

        ol>li {
            margin-top: 2rem;
            margin-bottom: 2rem;
        }

        li>span {
            margin-left: .2rem;
            margin-right: .2rem;
        }

        .progressBarBackground {
            display: block;
            background-color: lightgray;
            height: 24px;
        }

        .progressBar {
            display: inherit;
            background-color: lightgreen;
            color: grey;
            text-align: center;
            height: inherit;
            width: 0%;
        }
    </style>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // TODO: 新增進到頁面就會自動觸發 move function 的功能
            const record = $("#recordBtn");
            const stop = $("#stopRecordBtn");
            const canvas = document.querySelector(".visualizer");
            const soundClips = document.querySelector(".sound-clips");
            let blob;
            let labelName;

            stop.attr("disabled", true);

            let audioCtx;
            const canvasCtx = canvas.getContext("2d");

            if (navigator.mediaDevices.getUserMedia) {
                console.log("getUserMedia supported.");

                const constraints = { audio: true };
                let chunks = [];

                let onSuccess = function (stream) {

                    const mediaRecorder = new MediaRecorder(stream);

                    visualize(stream);

                    record.on("click", function (e) {
                        if (soundClips.childElementCount > 0) {
                            alert("請先刪除舊的錄音");
                            return;
                        }
                        mediaRecorder.start();
                        console.log(mediaRecorder.state);
                        console.log("recorder started");
                        record.css("background", "red");

                        stop.attr("disabled", false);
                        record.attr("disabled", true);
                    });

                    stop.on("click", function () {
                        mediaRecorder.stop();
                        console.log(mediaRecorder.state);
                        console.log("recorder stoped");
                        record.css("background", "");
                        record.css("color", "");

                        stop.attr("disabled", true);
                        record.attr("disabled", false);
                    });

                    mediaRecorder.onstop = function (e) {
                        const clipContainer = document.createElement("article");
                        const clipLabel = document.createElement("p");
                        const audio = document.createElement("audio");
                        const deleteButton = document.createElement("button");

                        clipContainer.classList.add("clip");
                        audio.setAttribute("controls", "");
                        deleteButton.textContent = "刪除";
                        deleteButton.className = "delete";

                        labelName = new Date().getTime() + ".ogg";
                        clipLabel.textContent = labelName;

                        clipContainer.appendChild(audio);
                        clipContainer.appendChild(clipLabel);
                        clipContainer.appendChild(deleteButton);
                        soundClips.appendChild(clipContainer);
                        move();

                        audio.controls = true;
                        blob = new Blob(chunks, { 'type': 'audio/ogg; codecs=opus' });
                        chunks = [];
                        const audioURL = window.URL.createObjectURL(blob);
                        audio.src = audioURL;
                        console.log("recorder stoped");

                        deleteButton.onclick = function (e) {
                            let eventTarget = e.target;
                            eventTarget.parentNode.parentNode.removeChild(eventTarget.parentNode);
                        };

                    };

                    mediaRecorder.ondataavailable = function (e) {
                        chunks.push(e.data);
                    }
                };
                let onError = function (err) {
                    console.log("The following error has occured" + err);
                }

                navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
            } else {
                console.log("getUserMedia not supported on your browser!");
            };

            function visualize(stream) {
                if (!audioCtx) {
                    audioCtx = new AudioContext();
                }

                const source = audioCtx.createMediaStreamSource(stream);

                const analyser = audioCtx.createAnalyser();
                analyser.fftSize = 2048;
                const bufferLength = analyser.frequencyBinCount;
                const dataArray = new Uint8Array(bufferLength);

                source.connect(analyser);

                draw()

                function draw() {
                    const WIDTH = canvas.width
                    const HEIGHT = canvas.height;

                    requestAnimationFrame(draw);

                    analyser.getByteTimeDomainData(dataArray);

                    canvasCtx.fillStyle = 'rgb(200, 200, 200)';
                    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

                    canvasCtx.lineWidth = 2;
                    canvasCtx.strokeStyle = 'rgb(0, 0, 0)';

                    canvasCtx.beginPath();

                    let sliceWidth = WIDTH * 1.0 / bufferLength;
                    let x = 0;


                    for (let i = 0; i < bufferLength; i++) {

                        let v = dataArray[i] / 128.0;
                        let y = v * HEIGHT / 2;

                        if (i === 0) {
                            canvasCtx.moveTo(x, y);
                        } else {
                            canvasCtx.lineTo(x, y);
                        }

                        x += sliceWidth;
                    }

                    canvasCtx.lineTo(canvas.width, canvas.height / 2);
                    canvasCtx.stroke();

                }
            };

            $("#recognizeBtn").on("click", function () {
                if (blob === undefined) {
                    alert("要先錄音ㄛ");
                    return;
                };
                $(this).attr("disabled", true);
                move();
                uploadSoundData(blob);
            });
            let results;

            function uploadSoundData(blob) {
                const filename = labelName;
                const formData = new FormData();
                formData.append("audio_data", blob, filename);

                fetch('./notes', {
                    method: 'POST',
                    body: formData
                }).then(async result => {
                    results = await result.json().then(res => {
                        return JSON.parse(res);
                    });
                    document.getElementById("transcriptOutput").innerHTML = results.transcript;
                    document.getElementById("zhuyinOutput").innerHTML = results.zhuyin;
                    move();
                }).catch(error => {
                    document.getElementById("transcriptOutput").innerHTML = "An error occurred: " + error;
                })
            }

            let uname;
            $("#uploadBtn").on("click", function () {
                $(this).attr("disabled", true);
                $.ajax({
                    type: "post",
                    url: `./users/${uname}`,
                    data: JSON.stringify({
                        text: $("#transcript").val(),
                        transcript: results.transcript,
                        zhuyin: results.zhuyin,
                        filePath: "[pathToFile]" + labelName
                    }),
                    success: function () {
                        location.reload();
                    },
                    contentType: 'application/json; charset=utf-8'
                })
            });

            $("#A").on("click", findValue);
            $("#B").on("click", findValue);
            $("#C").on("click", findValue);
            $("#D").on("click", findValue);

            // blur = lost focus
            $(":text").on("blur", move);

            function findValue(event) {
                uname = $(this).val();
                function datediff(first, second) {
                    return Math.round((second - first) / (1000 * 60 * 60 * 24 * 7));
                }
                let startDate = new Date(2022, 3, 23);
                let curDate = new Date().getTime();

                let week = datediff(startDate, curDate);

                $.ajax({
                    method: "get",
                    url: `./users/${uname}`,
                    success: function (data) {
                        let diff = week * 10 - data.某人的測資;
                        let diff_text = `，截至目前為止還需要 <span>${diff}</span>句。`;
                        if (diff < 0) {
                            diff_text = `，好棒，你超過了要求的<span>${-diff}</span>句。`
                        }

                        let pattern = `
                        目前資料庫裡面含有
                        <span>${data.全部測資}</span>
                        句已經紀錄的測資，其中
                        <span>${uname}</span>
                        佔了
                        <span>${data.某人的測資}</span>
                        句${diff_text}
                    `;
                        $("#Q2").html(pattern);
                        move();
                    }
                });
            }

            var width = 1;

            function checkInputs() {
                let flag = 0;
                if ($(":checked").length > 0) flag++;
                if ($("#Q2").html().length !== 72) flag++;
                if ($(":text").val().length > 0) flag++;
                if (soundClips.childElementCount > 0) flag++;
                if ($("#recognizeBtn").attr("disabled") == "disabled") flag++;
                return flag
            }

            function move() {
                const bar = document.getElementById("bar");
                var id = setInterval(frame, 10);
                let upperBound = checkInputs() * 20;
                upperBound = upperBound >= 100 ? 100 : upperBound;
                function frame() {
                    if (width == 100) {
                        bar.style.backgroundColor = "#efefef";
                        bar.innerText = "可以上傳囉";
                        $("#uploadBtn").attr("disabled", false);
                    }
                    else if (width >= upperBound) {
                        clearInterval(id);
                    }
                    else {
                        width++;
                        bar.style.width = width + "%";
                    }
                }
            }
        })
    </script>
</head>

<body>
    <fieldset>
        <legend>簡易測資搜集系統</legend>
        <p>步驟如下：</p>
        <ol>
            <li>
                <p>你是誰？</p>
                <input type="radio" id="A" name="uname" value="期翔"><label for="A">期翔</label>
                <input type="radio" id="B" name="uname" value="家瑋"><label for="B">家瑋</label>
                <input type="radio" id="C" name="uname" value="承翰"><label for="C">承翰</label>
                <input type="radio" id="D" name="uname" value="鈞凱"><label for="D">鈞凱</label>
            </li>
            <li id="Q2">
                目前資料庫裡面含有
                <span>
                    {{ allRecords }}
                </span>
                句已經紀錄的測資。
            </li>
            <li>
                <p>請輸入測資文字：</p>
                <input type="text" name="transcript" id="transcript">
            </li>
            <li>
                <p>點擊『開始錄音』按鈕開始錄音。</p>
                <div class="control">
                    <canvas class="visualizer" height="60px"></canvas>
                    <div class="buttons">
                        <button id="recordBtn">開始錄音</button>
                        <button id="stopRecordBtn">停止錄音</button>
                    </div>
                    <section class="sound-clips"></section>
                </div>
            </li>
            <li>
                <p>點擊『開始辨識語音』按鈕開始辨識。</p>
                <div class="control">
                    <button id="recognizeBtn">開始辨識語音</button>
                    <p id="transcriptOutput">辨識完成的文字</p>
                    <p id="zhuyinOutput">辨識完成的注音</p>
                </div>
            </li>
            <button id="uploadBtn" disabled>上傳</button>
        </ol>
        <div class="progressBarBackground">
            <div id="bar" class="progressBar"></div>
        </div>
    </fieldset>
</body>

</html>