<!DOCTYPE html>
<html lang="zh-TW">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}} - 語音辨識測試</title>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"
    integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const recordBtn = $("#record_btn");
      const soundClips = $('.sound_clips')[0];
      const output = $('#console_output');
      let status;
      let blob;

      const updateConsole = (msg) => {
        output.text(msg + '\n' + output.text());
      };

      LOG_PREFIX = () => {
        let date = new Date();
        let hour = date.getHours().toString();
        hour = hour.length < 2 ? '0' + hour : hour;
        let minutes = date.getMinutes().toString();
        minutes = minutes.length < 2 ? '0' + minutes : minutes;
        let seconds = date.getSeconds().toString();
        seconds = seconds.length < 2 ? '0' + seconds : seconds;
        return hour + ":" + minutes + ':' + seconds;
      };

      var log = console.log;

      console.log = function () {

        // 1. Convert args to a normal array
        var args = Array.from(arguments);
        // OR you can use: Array.prototype.slice.call( arguments );

        // 2. Prepend log prefix log string
        args.unshift(LOG_PREFIX() + ": ");

        // 3. Pass along arguments to console.log
        log.apply(console, args);
        updateConsole(args.join(''));
      }


      if (navigator.mediaDevices.getUserMedia) {
        console.log("getUserMedia supported.");

        const constraints = { audio: true };
        let chunks = [];

        let onSuccess = function (stream) {

          const mediaRecorder = new MediaRecorder(stream);

          recordBtn.on("mousedown", function (e) {
            mediaRecorder.start();
            console.log("recorder started");
            status = true;
          });

          const stop_event = ['mouseup', 'mouseout']

          stop_event.forEach(e => {
            recordBtn.on(e, _ => {
              if (!status) return;

              status = false;

              mediaRecorder.stop();
            });
          });

          mediaRecorder.onstop = function (e) {
            const clipContainer = document.createElement("article");
            const clipLabel = document.createElement("p");
            const audio = document.createElement("audio");
            const deleteButton = document.createElement("button");

            clipContainer.classList.add("clip");
            audio.setAttribute("controls", "");
            deleteButton.textContent = "刪除";
            deleteButton.className = "delete";

            labelName = new Date().getTime() + ".ogg";
            clipLabel.textContent = labelName;

            clipContainer.appendChild(audio);
            clipContainer.appendChild(clipLabel);
            clipContainer.appendChild(deleteButton);
            {{!-- soundClips.appendChild(clipContainer); --}}

            audio.controls = true;
            blob = new Blob(chunks, { 'type': 'audio/ogg; codecs=opus' });
            chunks = [];
            const audioURL = window.URL.createObjectURL(blob);
            audio.src = audioURL;
            console.log("recorder stoped");

            deleteButton.onclick = function (e) {
              let eventTarget = e.target;
              eventTarget.parentNode.parentNode.removeChild(eventTarget.parentNode);
            };
            uploadSoundData(blob);
          };

          mediaRecorder.ondataavailable = function (e) {
            chunks.push(e.data);
          }

        };
        let onError = function (err) {
          console.log("The following error has occured" + err);
        }

        navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
      } else {
        console.log("getUserMedia not supported on your browser!");
      };


      const uploadSoundData = (blob) => {
        if (blob === undefined) {
          alert("要先錄音ㄛ");
          return;
        };
        const filename = labelName;
        const formData = new FormData();
        formData.append("audio_data", blob, filename);

        fetch('/api/recognize', {
          method: 'POST',
          body: formData
        })
          .then(async res => {
            return await res.json()
          })
          .then(res => { 
            let json = JSON.parse(res);
            console.log('辨識結果: ' + JSON.stringify(json, null, 4));
            filter(json.transcript);
          })
          .catch(error => {
            console.log("An error occurred: " + error);
          })
      }

      const filter = (text) => {
        fetch('https://dev.kuaz.info/api/filter', {
          method: 'POST',
          body: JSON.stringify({ "text": text }),
          headers: { 'Content-Type': 'application/json' }
        })
          .then(res => res.json())
          .catch(error => console.error('Error:', error))
          .then(res => {
            console.log(`科目：${res['subject']}\t老師：${res['teacher']}`);
          });
      }
    });
  </script>
</head>

<body>
  <p>點擊『開始錄音』按鈕開始錄音。</p>
  <section class="control">
    <div class="buttons">
      <button id="record_btn">按著不放開開始錄音</button>
    </div>
  </section>
  <section>
    <div class="sound_clips"></div>
  </section>
  <section>
    <pre id="console_output"></pre>
  </section>
</body>

</html>